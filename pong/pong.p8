pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
_debug = true
_logfile = "logs.txt"

-- screen
_width = 128
_height = 128

-- sprites
_spr_width = 8
_spr_height = 8

-- colors
_black = 0
_dark_blue = 1
_dark_purple = 2
_dark_green = 3
_brown = 4
_dark_grey = 5
_light_grey = 6
_white = 7
_red = 8
_orange = 9
_yellow = 10
_green = 11
_blue = 12
_lavender = 13
_pink = 14
_light_peach = 15

-- buttons
_left = 0
_right = 1
_up = 2
_down = 3
_button_o = 4
_button_x = 5

-- utils
_tick = 0

-- text
_text_width = 4
_text_height = 5


-- prepare the debug environemnt.
function dbg_init()
  -- override the debug logfile.
  if _debug then printh("", _logfile, true) end
end

-- print to the host OS console.
function dbg(...)
  local args = {...}
  if _debug then
    msg = "["..t().."]:"
    for arg in all(args) do
      msg = msg.." "..tostring(arg)
    end
    printh(msg, _logfile)
  end
end

-- returns elements where true.
function filter(tbl, fn)
  for i = #tbl,1,-1 do
    if not fn(tbl[i]) then deli(tbl, i) end
  end
end

function clear(tbl)
  local count = #tbl
  for i = 1,count do
    tbl[i] = nil
  end
end

-- setups prototype inheritance
function inherit(child_prototype, parent_instance)
  assert(not child_prototype.parent)
  child_instance = setmetatable({}, parent_instance)
  for k, v in pairs(parent_instance) do
    child_instance[k] = v
  end

  for k, v in pairs(child_prototype) do
    child_instance[k] = v
  end
  child_instance.parent = parent_instance
  return child_instance
end

-- a simple ternary operator
function ternary(condition, true_case, false_case)
  if condition then
    return true_case
  else
    return false_case
  end
end

function read_input_vec2(player_idx)
  assert(player_idx)
  local input = _vec2(0, 0)
  if btn(_up, player_idx) then input.y -= 1 end
  if btn(_down, player_idx) then input.y += 1 end
  if btn(_left, player_idx) then input.x -= 1 end
  if btn(_right, player_idx) then input.x += 1 end
  return input
end

function print_centered(str, x, y, color)
  local str = tostring(str)
  local color = color or _white
  local x = x - _text_width * #str / 2 + 1
  local y = y - _text_height / 2
  print(str, x, y, color)
end

function print_left_justified(str, x, y, color)
  local str = tostring(str)
  local color = color or _white
  print(str, x, y, color)
end

function print_right_justified(str, x, y, color)
  local str = tostring(str)
  local x = x - _text_width * #str
  print(str, x, y, color)
end

function interp1d(frac, min, max)
  assert(frac >= 0)
  assert(frac <= 1)
  delta = max-min
  return min + frac * delta
end

function rnd01() return rnd(10000)/10000 end
function rndbool(frac)
  local frac = frac or 0.5
  return rnd01() < frac
end


_vec2 = {}
setmetatable(_vec2, _vec2)

function _vec2:__call(x, y)
  local instance = inherit({}, _vec2)
  instance.x = x or 0
  instance.y = y or 0
  return instance
end

-- unary minus
function _vec2:__unm()
  return _vec2(-self.x, -self.y)
end

function _vec2:__add(other)
  assert(other)
  return _vec2(self.x+other.x, self.y+other.y)
end

function _vec2:__sub(other)
  assert(other)
  return _vec2(self.x-other.x, self.y-other.y)
end

function _vec2:__mul(scalar)
  assert(scalar)
  return _vec2(self.x*scalar, self.y*scalar)
end

function _vec2:__div(scalar)
  assert(scalar)
  return _vec2(self.x/scalar, self.y/scalar)
end

function _vec2:__mod(scalar)
  assert(scalar)
  return _vec2(self.x%scalar, self.y%scalar)
end

function _vec2:__tostring()
  return "("..self.x..","..self.y..")"
end

function _vec2:norm()
  return sqrt(self.x^2 + self.y^2)
end

function _vec2:unit()
  return self / self:norm()
end

function _vec2:__eq(other)
  assert(other)
  return self.x == other.x and self.y == other.y
end

function _vec2:dot(other)
  assert(other)
  return self.x * other.x + self.y * other.y
end

function _vec2:cross(other)
  assert(other)
  return self.x*other.y - self.y*other.x
end

function _vec2:random_unit()
  local res = _vec2(0, 0)
  while res == _vec2(0, 0) do
    res = _vec2(rnd(100)-50, rnd(100)-50):unit()
  end
  return res
end

function _vec2:draw(color)
  local color = color or _green
  pset(self.x, self.y, color)
end


_line = {}
setmetatable(_line, _line)

function _line:__call(head, tail)
  assert(head)
  assert(head.x)
  assert(head.y)
  assert(tail)
  assert(tail.x)
  assert(tail.y)
  local instance = inherit({}, _line)
  instance.head=head
  instance.tail=tail
  return instance
end

function _line:delta() return self.tail - self.head end

function _line:intersection(other)
  assert(other)
  assert(other.head)
  assert(other.tail)
  head_delta = other.head - self.head
  self_delta = self:delta()
  other_delta = other:delta()
  delta_cross = self_delta:cross(other_delta)

  -- colinear or parallel
  if delta_cross == 0 then return nil end

  -- number in [0, 1] representing where the intersection
  -- happens along self.
  self_intersection_frac = head_delta:cross(other_delta) / delta_cross

  -- intersection happens outside of self.
  if 0 > self_intersection_frac or self_intersection_frac > 1 then return nil end

  other_intersection_frac = head_delta:cross(self_delta) / delta_cross

  -- intersection happens outside of other.
  if 0 > other_intersection_frac or other_intersection_frac > 1 then return nil end

  return self.head + self_delta * self_intersection_frac
end

function _line:draw(color)
  local color = color or _green
  line(self.head.x, self.head.y,
       self.tail.x, self.tail.y)
end


-- axis aligned bounding box
_aabb={}
setmetatable(_aabb, _aabb)

function  _aabb:__call(pos, size)
  assert(pos)
  assert(pos.x)
  assert(pos.y)
  assert(size.x >= 0)
  assert(size.y >= 0)
  local instance = inherit({}, _aabb)
  instance.pos = pos
  instance.size = size
  return instance
end

function _aabb:left() return self.pos.x end
function _aabb:top() return self.pos.y end
function _aabb:bottom()
  return self.pos.y + self.size.y
end
function _aabb:right()
  return self.pos.x + self.size.x
end
function _aabb:width() return self.size.x end
function _aabb:height() return self.size.y end

function _aabb:center()
  return self.pos + self.size / 2
end

function _aabb:corners()
  return {_vec2(self:left(), self:top()),
          _vec2(self:left(), self:bottom()),
          _vec2(self:right(), self:bottom()),
          _vec2(self:right(), self:top())}
end

function _aabb:edges()
  corners = self:corners()
  return {_line(corners[1], corners[2]),
          _line(corners[2], corners[3]),
          _line(corners[3], corners[4]),
          _line(corners[4], corners[1])}
end

function _aabb:onscreen()
  return self:top() <= _height and
         self:left() <= _width and
         self:bottom() >= 0 and
         self:right() >= 0
end

function _aabb:overlaps(other_aabb)
  assert(other_aabb)
  if self:left() > other_aabb:right() then
    return false end
  if self:right() < other_aabb:left() then
    return false end
  if self:top() > other_aabb:bottom() then
    return false end
  if self:bottom() < other_aabb:top() then
    return false end
  return true
end

function _aabb:contains(point)
  assert(point)
  return self:left() < point.x and
         point.x < self:right() and
         self:top() < point.y and
         point.y < self:bottom()
end

function _aabb:corner_in_dir(dir)
  assert(dir)
  return _vec2(
    ternary(dir.x>0, self:right(), self:left()),
    ternary(dir.y>0, self:bottom(), self:top()))
end


function _aabb:line_edge_intersection(line)
  assert(line)
  for edge in all(self:edges()) do
    pt = line:intersection(edge)
    if pt then return pt end
  end
  return nil
end

function _aabb:draw(color)
  local color = color or _green
  rect(self:left(), self:top(), self:right(), self:bottom(), color)
end


_actor={}
setmetatable(_actor, _actor)

function _actor:__call(params)
  local params = params or {}

  local instance = inherit({}, _actor)
  instance.pos = params.pos or _vec2(0, 0)
  instance.vel = params.vel or _vec2(0, 0)
  instance.acc = params.acc or _vec2(0, 0)
  instance.sprite = params.sprite or 0
  instance.width = params.width or 1
  instance.height = params.height or 1
  instance.flip_x = params.flip_x or false
  instance.flip_y = params.flip_y or false
  instance.visible = params.visible or true
  instance.age = 0
  instance.lifespan = params.lifespan or 0
  assert(instance.lifespan >= 0)
  instance.alive = true
  return instance
end

-- age in [0, 1] from alive to dead. if lifespan = 0, this is always 0.
function _actor:age_frac()
  if self.lifespan == 0 then return 0 end
  return min(1, self.age / self.lifespan)
end

function _actor:aabb()
  return _aabb(
    _vec2(self.pos.x, self.pos.y),
    _vec2(_spr_width * self.width-1,
          _spr_height * self.height -1))
end

function _actor:draw()
  if not self.visible then return end
  spr(self.sprite, self.pos.x, self.pos.y, self.width,
      self.height, self.flip_x, self.flip_y)
end

function _actor:update()
  if not self.alive then return end
  self.age += 1
  if self.lifespan > 0 and self.age >= self.lifespan then
    self.alive = false
    return
  end
  self.pos += self.vel
  self.vel += self.acc
end

-- moves self outside of an aabb
function _actor:aabb_separate(aabb)
  assert(aabb)
  -- point in the direction of movement
  inside_point = self:aabb():corner_in_dir(self.vel)
  -- last frame, we didn't collide
  outside_point = inside_point - self.vel
  movement_line = _line(inside_point, outside_point)
  edge_point = aabb:line_edge_intersection(
    movement_line)
  if not edge_point then
    dbg("Expected to separate bb's, but they don't collide")
    return
  end
  self.pos += edge_point - inside_point
end



_ball_particle = {}
setmetatable(_ball_particle, _ball_particle)

function _ball_particle:__call(params)
  local params = params or {}
  local parent = _actor(params)
  local instance = inherit(_ball_particle, parent)
  instance.young_color = params.young_color or _white
  instance.old_color = params.old_color or _dark_grey
  instance.max_size = params.max_size or 1
  instance.min_size = params.min_size or 1
  return instance
end

function _ball_particle:draw()
  local age_frac = self:age_frac()
  local color = ternary(age_frac < 0.5, self.young_color, self.old_color)
  local size = interp1d(age_frac, self.max_size, self.min_size)
  circfill(self.pos.x, self.pos.y, size, color)
end


_paddle={}
setmetatable(_paddle, _paddle)

paddle_speed = 4
paddle_x_margin = 12
paddle_nudge_amnt = 5
paddle_max_nudge_time = 4

function _paddle:__call(player_idx)
  assert(player_idx)
  local parent = _actor({sprite = ternary(player_idx==0, 1, 2),
                         width = 1, height = 4})
  local instance = inherit(_paddle, parent)
  instance.player_idx = player_idx
  instance:reset()
  return instance
end

function _paddle:reset()
  self.pos = _vec2(self:get_std_x_pos(),
                   _height / 2 - 2 * _spr_height)
  self.nudge_countdown = 0
end

function _paddle:get_std_x_pos()
  return ternary(self.player_idx==0, paddle_x_margin,
                 _width - paddle_x_margin - _spr_width)
end

function _paddle:get_nudge_offset()
  local nudge_frac = self.nudge_countdown / paddle_max_nudge_time
  local delta = interp1d(nudge_frac, 0, paddle_nudge_amnt)
  delta *= ternary(self.player_idx==0, 1, -1)
  dbg(self.player_idx, delta)
  return delta
end

function _paddle:update()
  self.nudge_countdown = max(0, self.nudge_countdown-1)
  input = read_input_vec2(self.player_idx)
  input.x = 0
  self.vel = input * paddle_speed
  self.pos.x = self:get_std_x_pos() + self:get_nudge_offset()
  self.parent.update(self)
end

function _paddle:nudge()
  if self.nudge_countdown == 0 then
    sfx(ternary(self.player_idx==0,0,1))
  end
  self.nudge_countdown = paddle_max_nudge_time
end


_ball = {}
setmetatable(_ball, _ball)

ball_speed_min = 2
ball_speed_max = 8
ball_speed_delta = 0.05
ball_bounce_rand_frac = 0.01
ball_particle_min_lifespan  = 4
ball_particle_max_lifespan = 16
ball_particle_min_rad = 0
ball_particle_max_rad = 2.5
ball_particle_speed = 2
ball_particle_vel_rand_frac = 0.2

function _ball:__call(particles)
  local parent = _actor({sprite = 3})
  local instance = inherit(_ball, parent)
  instance.particles = particles
  instance:reset()
  return instance
end

function jitter_vec2(vec, jitter_frac)
  assert(jitter_frac >= 0)
  assert(jitter_frac <= 1)
  local new_unit = vec:unit() * (1-jitter_frac) + _vec2:random_unit() * jitter_frac
  return new_unit * vec:norm()
end

function _ball:get_particle_lifespan()
  return interp1d(self.speed_frac, ball_particle_min_lifespan, ball_particle_max_lifespan)
end

function _ball:get_particle_size()
  return interp1d(self.speed_frac, ball_particle_min_rad, ball_particle_max_rad)
end

function _ball:update()
  self.parent.update(self)
  for i = 1,5 do
    if rndbool(self.speed_frac) then
      add(self.particles, _ball_particle({
          pos=self:aabb():center(),
          lifespan=self:get_particle_lifespan(),
          vel=jitter_vec2(-self.vel, ball_particle_vel_rand_frac),
          size=self:get_particle_size(),
          young_color=self:get_dark_color(),
          old_color=_dark_grey,
          max_size=ball_particle_max_rad,
          min_size=ball_particle_min_rad,
      }))
    end
  end
end

function _ball:reset()
  self.pos = _vec2(_width / 2 - _spr_width / 2,
                   _height / 2 - _spr_height / 2)
  -- go horizontally to one of the players.
  self.vel = jitter_vec2(_vec2(1, 0), 0.3):unit() * ball_speed_min
  if rndbool() then self.vel.x *= -1 end
  self.speed_frac  = 0
  self.alive = false
  self.last_paddle_hit = nil
end

function _ball:maybe_bounce_off_top_or_bot(aabb)
  assert(aabb)
  if not self:aabb():overlaps(aabb) then return end
  self:aabb_separate(aabb)
  ball.vel.y *= -1
end

function _ball:maybe_bounce_off_paddle(paddle)
  assert(paddle)
  if not self:aabb():overlaps(paddle:aabb()) then return end
  self:aabb_separate(paddle:aabb())
  if self.last_paddle_hit != paddle.player_idx then
    self.speed_frac  = min(1, self.speed_frac + ball_speed_delta)
    self.last_paddle_hit = paddle.player_idx
  end
  local diff = (self:aabb():center() - paddle:aabb():center()):unit()
  diff = jitter_vec2(diff, ball_bounce_rand_frac)
  self.vel = diff * interp1d(self.speed_frac, ball_speed_min, ball_speed_max)

  for i = 1,20 do
    if rndbool(self.speed_frac) then
      add(self.particles, _ball_particle({
            pos=self:aabb():center(),
            lifespan=self:get_particle_lifespan(),
            young_color=_tan,
            old_color=self:get_color(),
            vel=jitter_vec2(self.vel, 2*ball_particle_vel_rand_frac)/2,
            size=self:get_particle_size(),
      }))
    end
  end
  paddle:nudge()
end

function _ball:get_color()
  if self.last_paddle_hit == nil then return _white end
  if self.last_paddle_hit == 0 then return _blue end
  if self.last_paddle_hit == 1 then return _red end
end

function _ball:get_dark_color()
  if self.last_paddle_hit == nil then return _light_grey end
  if self.last_paddle_hit == 0 then return _dark_blue end
  if self.last_paddle_hit == 1 then return _dark_purple end
end

function _ball:draw()
  local aabb = self:aabb()
  local center = self:aabb():center()
  circfill(center.x, center.y, aabb:width()/2, _white)
  circfill(center.x, center.y, aabb:width()/2-1, self:get_color())
end


score_x_margin = 32
score_y_margin = 4
header_margin = 8

title = "<<pong!>>"


function _init()
  dbg_init()
  -- a global place to put actors.
  actors = {}
  particles = {}

  top_wall = _aabb(_vec2(0,-_height+header_margin), _vec2(_width, _height))
  bottom_wall = _aabb(_vec2(0,_height), _vec2(_width, _height))
  left_wall = _aabb(_vec2(-_width-8, 0), _vec2(_width, _height))
  right_wall = _aabb(_vec2(_width+8, 0), _vec2(_width, _height))

  walls = {top_wall, bottom_wall, left_wall, right_wall}

  p0 = _paddle(0)
  p1 = _paddle(1)
  p0_score = 0
  p1_score = 0
  ball = _ball(particles)
  add(actors, p0)
  add(actors, p1)
  add(actors, ball)
end

function _draw()
  cls()
  map(0, 1, -1, header_margin-1, 16, 16)
  foreach(particles, function(a) a:draw() end)
  foreach(actors, function(a) a:draw() end)

  print_centered(p0_score, score_x_margin, score_y_margin, _blue)
  print_centered(p1_score, _width-score_x_margin, score_y_margin, _red)
  print_centered(title, _width/2, score_y_margin, _white)

  if not ball.alive then
    print_centered("p1: ⬆️|⬇️", _width/2, 44, _white)
    print_centered(" p2:  e|d", _width/2, 52, _white)
    print_centered("z to start", _width/2, 80, _white)
  end
end

function _update()
  if btn(_button_x) or btn(_button_o) then
    ball.alive = true
  end

  if not ball.alive then return end

  foreach(actors, function(a) a:update() end)
  foreach(particles, function(a) a:update() end)
  filter(particles, function(a) return a.alive end)

  ball:maybe_bounce_off_paddle(p0)
  ball:maybe_bounce_off_paddle(p1)
  ball:maybe_bounce_off_top_or_bot(top_wall)
  ball:maybe_bounce_off_top_or_bot(bottom_wall)

  -- keep paddles on screen
  for wall in all({top_wall, bottom_wall}) do
    for paddle in all({p0, p1}) do
      if paddle:aabb():overlaps(wall) then
        paddle:aabb_separate(wall)
      end
    end
  end

  if ball:aabb():overlaps(left_wall) then
    p1_score += 1
    sfx(3) -- p1 score
    reset()
  end
  if ball:aabb():overlaps(right_wall) then
    p0_score += 1
    sfx(2) -- p1 score
    reset()
  end
end

function reset()
  ball:reset()
  p0:reset()
  p1:reset()
  clear(particles)
end



__gfx__
dadadada15ccc7000078885233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
a02d2d0d115ccc700788852233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
d20cc0da115ccc700788852233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
adc00c2d1115ccc77888522233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
d2c00cda1115ccc77888522233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
ad0cc02d1115ccc77888522233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
d0d2d20a1115ccc77888522233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
adadadad01115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000001115ccc8885222033333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
000000001115ccc77888522233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
000000001115ccc77888522233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
000000001115ccc77888522233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
000000001115ccc77888522233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
00000000115ccc700788852233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
00000000115ccc700788852233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
0000000015ccc7000078885233333333333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000ccc0000000000000007000707770077077000770070070007000000000000000888000000000000000000000000000000
0000000000000000000000000000000c0c0000000000000070007007070707070707000070007000700000000000000808000000000000000000000000000000
0000000000000000000000000000000c0c0000000000000700070007770707070707000070000700070000000000000808000000000000000000000000000000
0000000000000000000000000000000c0c0000000000000070007007000707070707070000007000700000000000000808000000000000000000000000000000
0000000000000000000000000000000ccc0000000000000007000707000770070707770070070007000000000000000888000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333377737733333333333777773337333777773333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333373733733373333337773777337337733377333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333377733733333333337733377337337733377333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333373333733373333337733377337337773777333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333373337773333333333777773337333777773333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333315ccc733333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333788852333333333330
333333333333115ccc73333333333333333333333333333333377737773333333333333777337337733333333333333333333333333337888522333333333330
333333333333115ccc73333333333333333333333333333333373733373373333333333733337337373333333333333333333333333337888522333333333330
3333333333331115ccc7333333333333333333333333333333377737773333333333333773337337373333333333333333333333333378885222333333333330
3333333333331115ccc7333333333333333333333333333333373337333373333333333733337337373333333333333333333333333378885222333333333330
3333333333331115ccc7333333333333333333333333333333373337773333333333333777337337773333333333333333333333333378885222333333333330
3333333333331115ccc7333333333333333333333333333333333333333333333333333333333333333333333333333333333333333378885222333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333777333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333337777733333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333377777773333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333377777773333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333377777773333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333337777733333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333777333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
33333333333331115ccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333388852223333333333330
3333333333331115ccc7333333333333333333333333333333333333333333333333333333333333333333333333333333333333333378885222333333333330
3333333333331115ccc7333333333333333333333333333333333333333333333333333333333333333333333333333333333333333378885222333333333330
3333333333331115ccc7333333333333333333333333333333333333333333333333333333333333333333333333333333333333333378885222333333333330
3333333333331115ccc7333333333333333333333333333333333333333333333333333333333333333333333333333333333333333378885222333333333330
333333333333115ccc73333333333333333333333333377733333777337733333377377737773777377733333333333333333333333337888522333333333330
333333333333115ccc73333333333333333333333333333733333373373733333733337337373737337333333333333333333333333337888522333333333330
33333333333315ccc733333333333333333333333333337333333373373733333777337337773773337333333333333333333333333333788852333333333330
33333333333333333333333333333333333333333333373333333373373733333337337337373737337333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333377733333373377333333773337337373737337333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330
33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330

__map__
0304050603040506030405060304050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314151613141516131415161314151600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2324252623242526232425262324252600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3334353633343536333435363334353600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0304050603040506030405060304050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314151613141516131415161314151600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2324252623242526232425262324252600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3334353633343536333435363334353600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0304050603040506030405060304050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314151613141516131415161314151600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2324252623242526232425262324252600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3334353633343536333435363334353600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0304050603040506030405060304050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314151613141516131415161314151600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2324252623242526232425262324252600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3334353633343536333435363334353600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0304050603040506030405060304050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314151613141516131415161314151600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2324252623242526232425262324252600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010100000e0500e0500e0500e05013050130501305013050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100001705017050170501705013050130501305013050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
180800000e05113051150511a0511a0511a0510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
19080000150511a0511f0512105121051210510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
